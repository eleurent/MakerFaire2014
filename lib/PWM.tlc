%% File : PWM.tlc


%implements PWM "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %assign hdrFile = LibGetModelDotHFile()

  %openfile tmpBuf
  #include <Arduino.h>
  %closefile tmpBuf

  %<LibSetSourceFileSection(hdrFile,"Includes",tmpBuf)>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %%

    /* Define pin as OUTPUT */
    pinMode((int_T)%<p1_val>, OUTPUT);
    
    /* Initialize pin value to 0 */
    analogWrite((int_T)%<p1_val>,0);
    
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %assign u1_val = LibBlockInputSignal(0, "", "", 0)
  %%

    /* Write value to PWM */
   if ((int_T)%<u1_val> > 255)
        analogWrite((int_T)%<p1_val>,255);
   else if ((int_T)%<u1_val> < 0)
        analogWrite((int_T)%<p1_val>,0);
   else
        analogWrite((int_T)%<p1_val>,(int_T)%<u1_val>);
      
  %%
%endfunction

%% Function: Terminate ====================================================
%%
%function Terminate(block, system) Output
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %%

    /* Set pin value to 0 */
    analogWrite((int_T)%<p1_val>,0); 

  %%
%endfunction

%% [EOF]
